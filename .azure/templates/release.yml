# File: release.yml
parameters:
  - name: "HELMSMAN_VERSION"
    default: "v3.7.2"
  - name: "HELMSMAN_TOML_FILE"
  - name: "HELMSMAN_APPLY"
    default: "--dry-run"
  - name: "HELMSMAN_WORKSPACE_NAME"
  - name: "KUBERNETES_SERVICE_CONNECTION"
  - name: "KUBERNETES_NAMESPACE"
  - name: "KUBERNETES_SERVICE_ACCOUNT"
    default: "helmsman"
  - name: "BUILD_ENV" 

jobs:
  - job: helmsman_release
    displayName: Build & Dry run
    variables:
      helmsman_config: ${{ parameters.HELMSMAN_TOML_FILE }}
      service_connection: ${{ parameters.KUBERNETES_NAMESPACE }}
      service_account: ${{ parameters.KUBERNETES_SERVICE_ACCOUNT }}
      namespace: ${{ parameters.KUBERNETES_NAMESPACE }}
      postgres_server:  $[ stageDependencies.${{ parameters.BUILD_ENV }}.tf_plan.outputs['terraformPlanOutput.psql_server_fqdn'] ]
      postgres_user:  $[ stageDependencies.${{ parameters.BUILD_ENV }}.tf_plan.outputs['terraformPlanOutput.psql_user'] ]
      postgres_password:  $[ stageDependencies.${{ parameters.BUILD_ENV }}.tf_plan.outputs['terraformPlanOutput.psql_password'] ]
    steps:
      - task: HelmInstaller@1
        displayName: Helm installation
        inputs:
          helmVersionToInstall: "latest"
      - task: Kubernetes@1
        name: saAuth
        displayName: Get SA Token
        inputs:
          connectionType: Kubernetes Service Connection
          kubernetesServiceEndpoint: ${{ parameters.KUBERNETES_SERVICE_CONNECTION }}
          namespace: ${{ parameters.KUBERNETES_NAMESPACE }}
          command: login
      - task: Bash@3
        name: getHelmsmanEnv
        displayName: Initialize helmsman variables
        inputs:
          targetType: inline
          script: |
            # Get Service Account secret info
            secret_name=$(kubectl get serviceAccounts $(service_account) -n $(namespace) -o=jsonpath="{.secrets[*].name}")
            cluster_token=$(kubectl get secret $secret_name -n $(namespace) -o jsonpath={.data.token} | base64 -d)
            cluster_cert=$(kubectl get secret $secret_name -n $(namespace) -o jsonpath="{.data.ca\.crt}" | base64 -d)

            # Set Service Account secret info
            printf "%s" "$cluster_token" >> $(System.DefaultWorkingDirectory)/charts/token
            printf "%s" "$cluster_cert" >> $(System.DefaultWorkingDirectory)/charts/cert.pem
        
      - task: Bash@3
        displayName: Helmsman Apply
        inputs:
          targetType: "inline"
          script: |
            cd  "$(System.DefaultWorkingDirectory)"/charts
            docker run \
            -v $PWD:/usr/src/app \
            -w /usr/src/app \
            -e POSTGRES_SERVER="$(postgres_server)" \
            -e POSTGRES_DB_USER="$(postgres_user)" \
            -e POSTGRES_DB_PASSWORD="$(postgres_password)" \
            praqma/helmsman:${{ parameters.HELMSMAN_VERSION }} \
            helmsman  \
            -f $(helmsman_config) \
            --keep-untracked-releases \
            --no-ns \
            --verbose \
            ${{ parameters.HELMSMAN_APPLY }}
