# File: infra.yml

parameters:
  - name: "AZ_SERVICE_CONNECTION"
  - name: "TF_VERSION"
    default: 1.0.3
  - name: "TF_WORKSPACE_NAME"
  - name: "TF_VAR_FILE"
  - name: "TF_APPLY"
    default: false
  - name: "TERRAFORM_DIRECTORY"
    default: "infrastructure"

jobs:
  - job: tf_plan
    displayName: "Terraform Validation"
    variables:
      TERRAFORM_DIRECTORY: ${{ parameters.TERRAFORM_DIRECTORY }}
      TF_VAR_FILE: ${{ parameters.TF_VAR_FILE }}
      TERRAFORM_WORKSPACE: ${{ parameters.TF_WORKSPACE_NAME }}
    steps:
      - script: mkdir $(Pipeline.Workspace)/.artifacts
        displayName: Prepare
      - task: TerraformInstaller@0
        displayName: install terraform
        inputs:
          terraformVersion: ${{ parameters.TF_VERSION }}
          terraformWorkspace: $(TERRAFORM_WORKSPACE)
          terraformVarFile: $(TF_VAR_FILE)
      - task: CmdLine@2
        displayName: Terraform lint
        inputs:
          workingDirectory: $(TERRAFORM_DIRECTORY)
          script: |
            terraform fmt -check
      - script: |
          cat <<EOF | tee ./git-askpass-helper.sh
          #!/bin/sh
          exec echo "\$GITHUB_TOKEN"
          EOF
          chmod 700 ./git-askpass-helper.sh
          echo "##vso[task.setvariable variable=GIT_ASKPASS;isOutput=true]./git-askpass-helper.sh"
        name: gitAskPass
        displayName: Set git-askpass
        workingDirectory: $(TERRAFORM_DIRECTORY)
      - task: AzureCLI@2
        displayName: Find or Create Storage Account
        inputs:
          azureSubscription: $(REMOTE_BACKEND_CONNECTION)
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            if [ $(az storage account check-name -n $(REMOTE_STORAGE_ACCOUNT_NAME) --query 'nameAvailable') = "true" ]
            then
              az storage account create -n $(REMOTE_STORAGE_ACCOUNT_NAME) -g $(REMOTE_RESOURCE_GROUP) \
              --https-only=true \
              --allow-blob-public-access=false \
              --location=eastus2 \
              --min-tls-version=TLS1_2
            fi
      - task: AzureCLI@2
        displayName: Find or Create Container
        inputs:
          azureSubscription: $(REMOTE_BACKEND_CONNECTION)
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            if [ $(az storage container exists -n $(PROJECT_NAME) --account-name $(REMOTE_STORAGE_ACCOUNT_NAME) --query 'exists') = "false" ]
            then
              az storage container create -n $(PROJECT_NAME) --account-name $(REMOTE_STORAGE_ACCOUNT_NAME)
            fi
      - task: AzureCLI@2
        name: getSacKey
        displayName: Get Storage Account Key
        inputs:
          azureSubscription: $(REMOTE_BACKEND_CONNECTION)
          scriptType: bash
          scriptLocation: inlineScript
          inlineScript: |
            sac_key=$(az storage account keys list \
            -g $(REMOTE_RESOURCE_GROUP) \
            -n $(REMOTE_STORAGE_ACCOUNT_NAME) \
            --query '[].value' -o tsv | sed -n 1p)
            echo "##vso[task.setvariable variable=REMOTE_STORAGE_KEY;issecret=true;isOutput=true]$sac_key"
      - script: |
          terraform init \
          -upgrade \
          -input=false \
          -backend-config="resource_group_name=$(REMOTE_RESOURCE_GROUP)" \
          -backend-config="storage_account_name=$(REMOTE_STORAGE_ACCOUNT_NAME)" \
          -backend-config="container_name=$(REMOTE_CONTAINER_NAME)" \
          -backend-config="access_key=$(getSacKey.REMOTE_STORAGE_KEY)" \
          -backend-config="key=$(PROJECT_NAME)"
        env:
          {
            GIT_ASKPASS: $(gitAskPass.GIT_ASKPASS),
            GITHUB_TOKEN: $(GITHUB_TOKEN),
          }
        workingDirectory: $(TERRAFORM_DIRECTORY)
        displayName: Terraform Init
      - script: |
          terraform workspace select $(TERRAFORM_WORKSPACE) \
          || terraform workspace new $(TERRAFORM_WORKSPACE)
        workingDirectory: $(TERRAFORM_DIRECTORY)
        displayName: Terraform Workspace
      - script: |
          terraform validate
        workingDirectory: $(TERRAFORM_DIRECTORY)
        displayName: Terraform Validate
      - task: AzureCLI@1
        name: getArmEnv
        displayName: Terraform credentials
        inputs:
          azureSubscription: ${{ parameters.AZ_SERVICE_CONNECTION }}
          scriptLocation: inlineScript
          inlineScript: |
            set -eu
            subscriptionId=$(az account show --query id -o tsv)
            echo "##vso[task.setvariable variable=ARM_CLIENT_ID;isOutput=true]$servicePrincipalId"
            echo "##vso[task.setvariable variable=ARM_CLIENT_SECRET;issecret=true;isOutput=true]$servicePrincipalKey"
            echo "##vso[task.setvariable variable=ARM_SUBSCRIPTION_ID;isOutput=true]$subscriptionId"
            echo "##vso[task.setvariable variable=ARM_TENANT_ID;isOutput=true]$tenantId"
          addSpnToEnvironment: true
      - script: |
          terraform plan \
          -var-file=$(TF_VAR_FILE) \
          -input=false \
          -out=$(Pipeline.Workspace)/.artifacts/terraform.tfplan
        env:
          {
            ARM_CLIENT_ID: $(getArmEnv.ARM_CLIENT_ID),
            ARM_CLIENT_SECRET: $(getArmEnv.ARM_CLIENT_SECRET),
            ARM_SUBSCRIPTION_ID: $(getArmEnv.ARM_SUBSCRIPTION_ID),
            ARM_TENANT_ID: $(getArmEnv.ARM_TENANT_ID),
          }
        workingDirectory: $(TERRAFORM_DIRECTORY)
        displayName: Terraform Plan
      - script: |
          terraform show -json $(Pipeline.Workspace)/.artifacts/terraform.tfplan > $(Pipeline.Workspace)/.artifacts/tfplan.json
        workingDirectory: $(TERRAFORM_DIRECTORY)
        displayName: Show Plan
      - script: |
          psql_user="$(jq -r '.planned_values | .outputs | .psql_user | .value' <  tfplan.json)"
          psql_server_fqdn="$(jq -r '.planned_values | .outputs | .psql_server_fqdn | .value' <  tfplan.json)"
          psql_password="$(jq -r '.planned_values | .outputs | .psql_password | .value' <  tfplan.json)"
          echo "##vso[task.setvariable variable=psql_user;isOutput=true]$psql_user"
          echo "##vso[task.setvariable variable=psql_server_fqdn;isOutput=true]$psql_server_fqdn"
          echo "##vso[task.setvariable variable=psql_password;isOutput=true]$psql_password"
        name: terraformPlanOutput
        displayName: Read terraform plan outputs
        workingDirectory: $(Pipeline.Workspace)/.artifacts
      - task: PublishPipelineArtifact@1
        displayName: publish tf plan
        inputs:
          targetPath: $(Pipeline.Workspace)/.artifacts
          artifactName: terraform

  - job: tf_apply
    displayName: "Terraform Apply"
    dependsOn: tf_plan
    condition: and(succeeded(), eq('${{ parameters.TF_APPLY }}', true))
    variables:
      TERRAFORM_DIRECTORY: ${{ parameters.TERRAFORM_DIRECTORY }}
      REMOTE_STORAGE_KEY: $[ dependencies.tf_plan.outputs['getSacKey.REMOTE_STORAGE_KEY'] ]
      ARM_CLIENT_ID: $[ dependencies.tf_plan.outputs['getArmEnv.ARM_CLIENT_ID'] ]
      ARM_CLIENT_SECRET: $[ dependencies.tf_plan.outputs['getArmEnv.ARM_CLIENT_SECRET'] ]
      ARM_SUBSCRIPTION_ID: $[ dependencies.tf_plan.outputs['getArmEnv.ARM_SUBSCRIPTION_ID'] ]
      ARM_TENANT_ID: $[ dependencies.tf_plan.outputs['getArmEnv.ARM_TENANT_ID'] ]
      TERRAFORM_WORKSPACE: ${{ parameters.TF_WORKSPACE_NAME }}
    steps:
      - task: DownloadPipelineArtifact@2
        displayName: Download tf plan
      - task: TerraformInstaller@0
        displayName: install terraform
        inputs:
          terraformVersion: ${{ parameters.TF_VERSION }}
          terraformWorkspace: $(TERRAFORM_WORKSPACE)
          terraformVarFile: $(TF_VAR_FILE)
      - script: |
          cat <<EOF | tee ./git-askpass-helper.sh
          #!/bin/sh
          exec echo "\$GITHUB_TOKEN"
          EOF
          chmod 700 ./git-askpass-helper.sh
          echo "##vso[task.setvariable variable=GIT_ASKPASS;isOutput=true]./git-askpass-helper.sh"
        name: gitAskPass
        displayName: Set git-askpass
        workingDirectory: $(TERRAFORM_DIRECTORY)
      - script: |
          terraform init \
          -upgrade \
          -input=false \
          -backend-config="resource_group_name=$(REMOTE_RESOURCE_GROUP)" \
          -backend-config="storage_account_name=$(REMOTE_STORAGE_ACCOUNT_NAME)" \
          -backend-config="container_name=$(REMOTE_CONTAINER_NAME)" \
          -backend-config="access_key=$(REMOTE_STORAGE_KEY)" \
          -backend-config="key=$(PROJECT_NAME)"
        env:
          {
            GIT_ASKPASS: $(gitAskPass.GIT_ASKPASS),
            GITHUB_TOKEN: $(GITHUB_TOKEN),
          }
        workingDirectory: $(TERRAFORM_DIRECTORY)
        displayName: Terraform Init
      - script: |
          terraform workspace select $(TERRAFORM_WORKSPACE)  \
          || terraform workspace new $(TERRAFORM_WORKSPACE)
        workingDirectory: $(TERRAFORM_DIRECTORY)
        displayName: Terraform Workspace
      - script: |
          terraform validate
        workingDirectory: $(TERRAFORM_DIRECTORY)
        displayName: Terraform Validate
      - script: |
          terraform apply \
          -input=false \
          --auto-approve \
          $(Pipeline.Workspace)/terraform/terraform.tfplan
        env:
          {
            ARM_CLIENT_ID: $(ARM_CLIENT_ID),
            ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET),
            ARM_SUBSCRIPTION_ID: $(ARM_SUBSCRIPTION_ID),
            ARM_TENANT_ID: $(ARM_TENANT_ID),
          }    
        name: terraformApply
        displayName: Terraform Apply
        workingDirectory: $(TERRAFORM_DIRECTORY)